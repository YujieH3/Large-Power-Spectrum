mprof.py: Sampling memory every 0.1s
running new process
numpy save: 98.15831420570612 s
numpy load: 133.1326816221699 s
numpy save: 73.96555625181645 s
numpy load: 9.943339491263032 s
numpy save: 74.03669998794794 s
numpy load: 14.521859577856958 s
Filename: /appalachia/d6/yujie/Test_PowerSpec/tmptest__.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
     7     70.7 MiB     70.7 MiB           1   @profile
     8                                         def test_numpy(Nsize, type):
     9     70.7 MiB      0.0 MiB           1     if type == 'complex128':
    10                                             arr = np.random.rand(Nsize, Nsize, Nsize, 3) + 1j * np.random.rand(Nsize, Nsize, Nsize, 3)
    11                                             arr = arr.astype(np.complex128)
    12     70.7 MiB      0.0 MiB           1     elif type == 'complex64':
    13  49215.7 MiB  49145.0 MiB           1       arr = np.random.rand(Nsize, Nsize, Nsize, 3) + 1j * np.random.rand(Nsize, Nsize, Nsize, 3)
    14  24639.7 MiB -24576.0 MiB           1       arr = arr.astype(np.complex64)
    15                                           elif type == 'float64':
    16                                             arr = np.random.rand(Nsize, Nsize, Nsize, 3)
    17                                             arr = arr.astype(np.float64)
    18                                           elif type == 'float32':
    19                                             arr = np.random.rand(Nsize, Nsize, Nsize, 3)
    20                                             arr = arr.astype(np.float32)
    21                                           else:
    22                                             raise ValueError("type not supported")
    23                                         
    24  24639.7 MiB     -0.3 MiB           4     for i in range(3):
    25  24639.7 MiB     -9.7 MiB           3       t0 = time.perf_counter()
    26  24635.5 MiB    -13.9 MiB           3       np.save('test.npy', arr)
    27  24635.5 MiB     -1.2 MiB           3       t = time.perf_counter() - t0
    28  24635.5 MiB     -1.2 MiB           3       print("numpy save: {} s".format(t))
    29                                         
    30  24635.5 MiB     -1.2 MiB           3       t0 = time.perf_counter()
    31  24634.9 MiB     -2.2 MiB           3       arr = np.load('test.npy')
    32  24634.9 MiB     -0.3 MiB           3       t = time.perf_counter() - t0
    33  24634.9 MiB     -0.3 MiB           3       print("numpy load: {} s".format(t))
    34                                         
    35  24634.9 MiB     -0.3 MiB           3       os.system('rm test.npy')


